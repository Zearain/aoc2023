@using Zearain.AoC23.Contracts.Responses

@implements IDisposable

@inject AdventDayHttpClient AdventDayHttpClient
@inject AdventDayHubListener AdventDayHubListener

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Days</MudText>
<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Create Day</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudInput @bind-Value="dayNumber" Label="Day Number" />
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CreateDay">Create Day</MudButton>
    </MudCardContent>
</MudCard>

<MudGrid class="mt-8">
    @foreach (var adventDay in adventDays)
    {
        <AdventDayItem AdventDay="@adventDay" />
    }
</MudGrid>

@code {
    private int dayNumber;
    private bool processingCreateDay;

    private List<AdventDayResponse> adventDays = new List<AdventDayResponse>();

    public void Dispose()
    {
        AdventDayHubListener.OnAdventDayCreated -= AdventDayHubListener_OnAdventDayCreated;
    }

    protected override async Task OnInitializedAsync()
    {
        AdventDayHubListener.OnAdventDayCreated += AdventDayHubListener_OnAdventDayCreated;

        adventDays.Clear();
        adventDays.AddRange(await AdventDayHttpClient.GetAdventDaysAsync());

        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateDay()
    {
        processingCreateDay = true;
        var createdDay = await AdventDayHttpClient.CreateAdventDayAsync(dayNumber);
        
        if (adventDays.Any(x => x.DayNumber == createdDay.DayNumber))
        {
            processingCreateDay = false;
            return;
        }

        adventDays.Add(createdDay);
        processingCreateDay = false;
        await InvokeAsync(StateHasChanged);
    }
    

    private async Task AdventDayHubListener_OnAdventDayCreated(AdventDayResponse adventDay)
    {
        if (adventDays.Any(x => x.DayNumber == adventDay.DayNumber) || processingCreateDay)
        {
            return;
        }

        adventDays.Add(adventDay);
        await InvokeAsync(StateHasChanged);
    }
}
@implements IDisposable

@inject AdventDayHttpClient AdventDayHttpClient
@inject IDialogService DialogService
@inject AdventDayHubListener AdventDayHubListener

<MudItem xs="12" sm="6" md="4">
    <MudCard Elevation="25" Class="rounded-lg pb-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Align="Align.Center">Day @AdventDay.DayNumber</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <div class="d-flex justify-center">
                <MudText Typo="Typo.h3">@(AdventDay.HasInput ? "Ready" : "No Input")</MudText>
            </div>
            <MudList Class="mx-auto mt-4">
                @foreach (var partSolution in AdventDay.PartSolutions)
                {
                    <MudListItem Icon="@Icons.Material.Filled.LiveHelp">
                        <MudText Typo="Typo.body1" Class="text-center">Part @partSolution.PartNumber</MudText>
                        <MudText Typo="Typo.body1" Class="text-center">@partSolution.Solution</MudText>
                    </MudListItem>
                }
            </MudList>
        </MudCardContent>
        <MudCardActions Class="d-flex justify-center">
            @if (AdventDay.HasInput)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Style="width:50%;" OnClick="@(async () => await SolvePart(1))">Solve Part 1</MudButton>
                if (AdventDay.PartSolutions.Count() > 0)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Style="width:50%;" OnClick="@(async () => await SolvePart(2))">Solve Part 2</MudButton>
                }
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Style="width:50%;" OnClick="UploadInput">Upload Input</MudButton>
            }
        </MudCardActions>
    </MudCard>
</MudItem>

@code {
    [Parameter, EditorRequired]
    public AdventDayResponse AdventDay { get; set; } = null!;

    public void Dispose()
    {
        AdventDayHubListener.OnDayInputAdded -= DayInputAdded;
        AdventDayHubListener.OnPartSolutionAdded -= PartSolutionAdded;
    }

    protected override void OnInitialized()
    {
        AdventDayHubListener.OnDayInputAdded += DayInputAdded;
        AdventDayHubListener.OnPartSolutionAdded += PartSolutionAdded;
    }

    private async Task UploadInput()
    {
        var parameters = new DialogParameters<UploadInputDialog> { { x => x.AdventDayId, AdventDay.Id } };
        var dialogResult = await DialogService.ShowAsync<UploadInputDialog>("Upload Input", parameters);
    }

    private async Task SolvePart(int partNumber)
    {
        await AdventDayHttpClient.SolvePartAsync(AdventDay.Id, partNumber);
    }

    

    private async Task DayInputAdded(Guid adventDayId, string input, bool hasInput)
    {
        if (adventDayId != AdventDay.Id)
        {
            return;
        }

        AdventDay.HasInput = hasInput;

        await InvokeAsync(StateHasChanged);
    }

    private async Task PartSolutionAdded(Guid adventDayId, PartSolutionResponse partSolution)
    {
        if (adventDayId != AdventDay.Id)
        {
            return;
        }

        var existingPartSolution = AdventDay.PartSolutions.FirstOrDefault(x => x.PartNumber == partSolution.PartNumber);
        if (existingPartSolution != null)
        {
            var newList = AdventDay.PartSolutions.ToList();
            newList.Remove(existingPartSolution);
            newList.Add(partSolution);
            AdventDay.PartSolutions = newList;
        }
        else
        {
            var newList = AdventDay.PartSolutions.ToList();
            newList.Add(partSolution);
            AdventDay.PartSolutions = newList;
        }

        await InvokeAsync(StateHasChanged);
    }
}
